#include "imports/stdlib.fc";
#include "constants.fc";

cell pack_jetton_wallet_data(int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
    return  begin_cell()
    .store_coins(balance)
    .store_slice(owner_address)
    .store_slice(jetton_master_address)
    .store_ref(jetton_wallet_code)
    .end_cell();
}

cell calculate_jetton_wallet_state_init(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
    return begin_cell()
    .store_uint(0, 2)
    .store_dict(jetton_wallet_code)
    .store_dict(pack_jetton_wallet_data(0, owner_address, jetton_master_address, jetton_wallet_code))
    .store_uint(0, 1)
    .end_cell();
}

slice calculate_jetton_wallet_address(cell state_init) inline {
    return begin_cell().store_uint(4, 3)
    .store_int(const::workchain, 8)
    .store_uint(cell_hash(state_init), 256)
    .end_cell()
    .begin_parse();
}

slice calculate_user_jetton_wallet_address(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
    return calculate_jetton_wallet_address(calculate_jetton_wallet_state_init(owner_address, jetton_master_address, jetton_wallet_code));
}

() force_chain(slice addr) impure {
    (int wc, _) = parse_std_addr(addr);
    throw_unless(333, wc == const::workchain);
}

int is_resolvable?(slice addr) inline {
    (int wc, _) = parse_std_addr(addr);

    return wc == const::workchain;
}

cell get_nft_transfer_body(int query_id, slice destAddr, slice respAddr, int fwdAmount, cell fwdCell) inline {
    builder body = begin_cell()
        .store_uint(op::nft_transfer, 32)
        .store_uint(query_id, 64)
        .store_slice(destAddr)
        .store_slice(respAddr)
        .store_uint(0, 1)
        .store_coins(fwdAmount);

    if(null?(fwdCell)) {
        return body.store_uint(0, 1).end_cell();
    } else {
        return body.store_uint(1, 1).store_ref(fwdCell).end_cell();
    }
}