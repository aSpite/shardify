#include "imports/stdlib.fc";
#include "constants.fc";
#include "utils.fc";

global slice storage::jetton_master_address;
global slice storage::nft_address;
global slice storage::last_taker_address;
global cell storage::jetton_wallet_code;
global cell storage::holder_code;
global int storage::parts_count;
global int storage::own_nft?;
global int storage::init?;

() load_data() impure {
    slice ds = get_data().begin_parse();
    storage::jetton_master_address = ds~load_msg_addr();
    storage::nft_address = ds~load_msg_addr();
    storage::init? = false;

    if(slice_bits(ds) > 0 ) {
        storage::init? = true;
        storage::parts_count = ds~load_coins();
        storage::own_nft? = ds~load_int(1);
        storage::last_taker_address = ds~load_msg_addr();
        storage::jetton_wallet_code = ds~load_ref();
        storage::holder_code = ds~load_ref();
    }
}

() save_data() impure {
    set_data(begin_cell()
            ;; 1023 - 267 + 124 (max) + 267 + 1 + 267 = 97 bits available
            .store_slice(storage::jetton_master_address)
            .store_slice(storage::nft_address)
            .store_coins(storage::parts_count)
            .store_int(storage::own_nft?, 1)
            .store_slice(storage::last_taker_address)
            .store_ref(storage::jetton_wallet_code)
            .store_ref(storage::holder_code)
            .end_cell()
    );
}

slice zero_address() asm "b{00} PUSHSLICE";

() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    load_data();
    if (flags & 1) {
        in_msg_body~skip_bits(32); ;; 0xFFFFFFFF
        int op = in_msg_body~load_uint(32);
        throw_unless(error::not_nft_transfer, (op == op::nft_transfer));
        int query_id = in_msg_body~load_uint(64);
        storage::own_nft? = true;
        cell msg_body = begin_cell()
            .store_uint(op::return_fail, 32)
            .store_uint(query_id, 64)
            .store_slice(storage::nft_address)
            .end_cell();
        send_raw_message(begin_cell()
            .store_uint(flag::non_bounceable, 6)
            .store_slice(calculate_jetton_wallet_address(calculate_jetton_wallet_state_init(storage::last_taker_address,
                storage::jetton_master_address, storage::jetton_wallet_code, storage::parts_count, storage::holder_code)))
            .store_coins(0)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(msg_body)
            .end_cell()
            , 64);
        storage::last_taker_address = zero_address();
        save_data();
        return ();
    }

    slice sender = cs~load_msg_addr();
    if(~ storage::init?) {
        throw_unless(error::unauthorized, equal_slices(storage::jetton_master_address, sender));
        storage::parts_count = in_msg_body~load_coins();
        storage::jetton_wallet_code = in_msg_body~load_ref();
        storage::holder_code = in_msg_body~load_ref();
        storage::own_nft? = false;
        storage::last_taker_address = zero_address();
        raw_reserve(fee::holder_storage, 0);
        send_raw_message(begin_cell()
            .store_uint(flag::non_bounceable, 6)
            .store_slice(in_msg_body)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::excesses, 32)
            .store_uint(0, 64)
            .end_cell(), 130); ;; ignore errors
        save_data();
        return();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if(op == op::nft_ownership_assigned) {
        if(~ equal_slices(sender, storage::nft_address)) {
            slice prev_owner = in_msg_body~load_msg_addr();
            send_raw_message(begin_cell()
                .store_uint(flag::non_bounceable, 6)
                .store_slice(sender)
                .store_coins(0)
                .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_ref(get_nft_transfer_body(
                    query_id, prev_owner, prev_owner, 0, null())
                )
                .end_cell(), 64);
            return();
        }
        send_raw_message(begin_cell()
            .store_uint(flag::non_bounceable, 6)
            .store_slice(in_msg_body.preload_ref().begin_parse())
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::excesses, 32)
            .store_uint(query_id, 64)
            .end_cell(), 66); ;; ignore errors
        storage::own_nft? = true;
        save_data();
        return();
    }

    if(op == op::return_nft) {
        int jetton_amount = in_msg_body~load_coins();
        slice nft_address = in_msg_body~load_msg_addr();
        storage::last_taker_address = in_msg_body~load_msg_addr();
        in_msg_body.end_parse();
        throw_unless(error::unauthorized,
            equal_slices(calculate_user_jetton_wallet_address(storage::last_taker_address, storage::jetton_master_address,
                storage::jetton_wallet_code, storage::parts_count, storage::holder_code), sender)
        );
        throw_unless(error::wrong_nft, equal_slices(nft_address, storage::nft_address));
        throw_unless(error::not_own, storage::own_nft? == true);
        storage::own_nft? = false;
        save_data();
        send_raw_message(begin_cell()
            .store_uint(flag::bounceable, 6)
            .store_slice(storage::nft_address)
            .store_coins(0)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(get_nft_transfer_body(
            query_id, storage::last_taker_address, my_address(), 0, null())
                )
                .end_cell()
        , 64);
        return();
    }

    if(op == op::nft_excesses) {
        throw_unless(error::wrong_nft, equal_slices(sender, storage::nft_address));
        raw_reserve(fee::holder_storage, 0);
        cell burn_body = begin_cell()
            .store_uint(op::burn_notification, 32)
            .store_uint(query_id, 64)
            .store_coins(storage::parts_count)
            .store_slice(storage::nft_address)
            .store_slice(storage::last_taker_address)
            .end_cell();
        send_raw_message(begin_cell()
            .store_uint(flag::non_bounceable, 6)
            .store_slice(storage::jetton_master_address)
            .store_coins(0)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(burn_body)
            .end_cell()
            , 128);
        storage::last_taker_address = zero_address();
        save_data();
        return();
    }

    if(op == op::repeat_return) {
        throw_unless(error::unauthorized, equal_slices(sender, storage::last_taker_address));
        slice owner_address = in_msg_body~load_msg_addr();
        in_msg_body.end_parse();
        send_raw_message(begin_cell()
            .store_uint(flag::non_bounceable, 6)
            .store_slice(storage::nft_address)
            .store_coins(0)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(get_nft_transfer_body(
                query_id, owner_address, my_address(), 0, null())
            )
            .end_cell()
            , 64); ;; pay fees separately, revert on errors
        return();
    }
}

(slice, slice, slice, int, int) get_holder_data() method_id {
    load_data();
    if(~ storage::init?) {
        return (zero_address(), zero_address(), zero_address(), -1, 0);
    }

    return (
        storage::jetton_master_address,
        storage::nft_address,
        storage::last_taker_address,
        storage::parts_count,
        storage::own_nft?
    );
}

(cell) get_jetton_wallet_code() method_id {
    load_data();
    return storage::jetton_wallet_code;
}