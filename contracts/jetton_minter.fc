;; It is recommended to use https://github.com/ton-blockchain/token-contract/blob/main/ft/jetton-minter-discoverable.fc
;; instead of this contract, see https://github.com/ton-blockchain/TEPs/blob/master/text/0089-jetton-wallet-discovery.md

;; 6905(computational_gas_price) * 1000(cur_gas_price) = 6905000
;; ceil(6905000) = 10000000 ~= 0.01 TON

;; storage scheme
;; storage#_ total_supply:Coins admin_address:MsgAddress content:^Cell jetton_wallet_code:^Cell = Storage;

#include "imports/stdlib.fc";
#include "constants.fc";
#include "utils.fc";

(int, slice, cell, cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_coins(), ;; total_supply
        ds~load_msg_addr(), ;; admin_address
        ds~load_ref(), ;; content
        ds~load_ref(), ;; jetton_wallet_code
        ds~load_ref() ;; fractionalization data
    );
}

() save_data(int total_supply, slice admin_address, cell content, cell jetton_wallet_code, cell frac_data) impure inline {
    set_data(begin_cell()
    .store_coins(total_supply)
    .store_slice(admin_address)
    .store_ref(content)
    .store_ref(jetton_wallet_code)
    .store_ref(frac_data)
    .end_cell()
    );
}

() return_nft(slice nft_address, int query_id, slice dest) impure inline {
    cell body = get_nft_transfer_body(query_id, dest, dest, 0, null());
    send_raw_message(begin_cell()
        .store_uint(flag::non_bounceable, 6)
        .store_slice(nft_address)
        .store_coins(0)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(body)
        .end_cell(), 64);
}

() mint_tokens(slice to_address, cell jetton_wallet_code, int amount, cell master_msg, int parts_count, cell nft_holder_code) impure {
    cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(),
        jetton_wallet_code, parts_count, nft_holder_code);
    slice to_wallet_address = calculate_jetton_wallet_address(state_init);
    var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(to_wallet_address)
    .store_coins(amount)
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(state_init)
    .store_ref(master_msg);
    send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code, cell frac_data) = load_data();
    (int parts_count, cell nft_holder_code, int public_key, slice collection_address, slice creator_address) = unpack_frac_data(frac_data);

    if (op == op::mint) {
        throw_unless(73, equal_slices(sender_address, admin_address));
        slice to_address = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();
        cell master_msg = in_msg_body~load_ref();
        slice master_msg_cs = master_msg.begin_parse();
        master_msg_cs~skip_bits(32 + 64); ;; op + query_id
        int jetton_amount = master_msg_cs~load_coins();
        mint_tokens(to_address, jetton_wallet_code, amount, master_msg, parts_count, nft_holder_code);
        save_data(total_supply + jetton_amount, admin_address, content, jetton_wallet_code, frac_data);
        return ();
    }

    if (op == op::burn_notification) {
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        throw_unless(74,
                equal_slices(calculate_holder_address(calculate_holder_state_init(my_address(), from_address, nft_holder_code)),
                    sender_address)
                |
                equal_slices(calculate_user_jetton_wallet_address(from_address, my_address(),
                jetton_wallet_code, parts_count, nft_holder_code), sender_address)
        );
        save_data(total_supply - jetton_amount, admin_address, content, jetton_wallet_code, frac_data);
        slice response_address = in_msg_body~load_msg_addr();
        if (response_address.preload_uint(2) != 0) {
            var msg = begin_cell()
            .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
            .store_slice(response_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::excesses, 32)
            .store_uint(query_id, 64);
            send_raw_message(msg.end_cell(), 2 + 64);
        }
        return ();
    }

    if (op == op::provide_wallet_address) {
        throw_unless(75, msg_value > fwd_fee + fee::provide_address);

        slice owner_address = in_msg_body~load_msg_addr();
        int include_address? = in_msg_body~load_uint(1);

        cell included_address = include_address?
        ? begin_cell().store_slice(owner_address).end_cell()
        : null();

        var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(sender_address)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op::take_wallet_address, 32)
        .store_uint(query_id, 64);

        if (is_resolvable?(owner_address)) {
            msg = msg.store_slice(calculate_user_jetton_wallet_address(owner_address,
                my_address(), jetton_wallet_code, parts_count, nft_holder_code));
        } else {
            msg = msg.store_uint(0, 2); ;; addr_none
        }
        send_raw_message(msg.store_maybe_ref(included_address).end_cell(), 64);
        return ();
    }

    if (op == 3) { ;; change admin
        throw_unless(73, equal_slices(sender_address, admin_address));
        slice new_admin_address = in_msg_body~load_msg_addr();
        save_data(total_supply, new_admin_address, content, jetton_wallet_code, frac_data);
        return ();
    }

    if (op == 4) { ;; change content, delete this for immutable tokens
        throw_unless(73, equal_slices(sender_address, admin_address));
        save_data(total_supply, admin_address, in_msg_body~load_ref(),jetton_wallet_code, frac_data);
        return ();
    }

    if (op == op::nft_ownership_assigned) {
        slice prev_owner = in_msg_body~load_msg_addr();
        in_msg_body~skip_bits(1); ;; Either Cell ^Cell
        in_msg_body = in_msg_body.preload_ref().begin_parse();
        slice signature = in_msg_body~load_bits(512);
        cell payloadCell = in_msg_body~load_ref();
        if (~ check_signature(cell_hash(payloadCell), signature, public_key)) {
            return_nft(sender_address, query_id, prev_owner);
            return ();
        }
        slice payload = payloadCell.begin_parse();
        int valid_until = payload~load_uint(32);
        if (valid_until <= now()) {
            return_nft(sender_address, query_id, prev_owner);
            return ();
        }
        if (~ equal_slices(sender_address, get_nft_address(collection_address, payload~load_uint(64), payload~load_ref()))) {
            return_nft(sender_address, query_id, prev_owner);
            return ();
        }
        int frac_price = payload~load_coins();
        if (msg_value < (frac_price + fee::fractionalization)) {
            return_nft(sender_address, query_id, prev_owner);
            return ();
        }

        int creator_fee_numerator = payload~load_uint(8);
        int creator_part = frac_price * creator_fee_numerator / 100;
        raw_reserve(0, 4);
        if(creator_part > 0) {
            send_raw_message(begin_cell()
            .store_uint(flag::non_bounceable, 6)
            .store_slice(creator_address)
            .store_coins(creator_part)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::fractionalization_fee, 32)
            .store_uint(query_id, 64)
            .end_cell(), 1);
        }
        send_raw_message(begin_cell()
            .store_uint(flag::non_bounceable, 6)
            .store_slice(admin_address)
            .store_coins(frac_price - creator_part)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::fractionalization_fee, 32)
            .store_uint(query_id, 64)
            .end_cell(), 1);

        cell holder_state_init = calculate_holder_state_init(my_address(), sender_address, nft_holder_code);
        cell holder_body = begin_cell()
            .store_coins(parts_count)
            .store_ref(jetton_wallet_code)
            .store_ref(nft_holder_code)
            .end_cell();
        slice holder_address = calculate_holder_address(holder_state_init);
        send_raw_message(begin_cell()
            .store_uint(flag::non_bounceable, 6)
            .store_slice(holder_address)
            .store_coins(500000000) ;; 0.5 TON
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1)
            .store_uint(1, 1)
            .store_ref(holder_state_init)
            .store_uint(1, 1)
            .store_ref(holder_body)
            .end_cell(), 1);

        send_raw_message(begin_cell()
            .store_uint(flag::non_bounceable, 6)
            .store_slice(sender_address)
            .store_coins(50000000) ;; 0.05 TON
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(get_nft_transfer_body(query_id, holder_address, prev_owner, 20000000,
                begin_cell().store_slice(prev_owner).end_cell()))
            .end_cell(), 1);

        cell master_msg = begin_cell()
            .store_uint(op::internal_transfer, 32)
            .store_uint(query_id, 64)
            .store_coins(parts_count)
            .store_slice(my_address())
            .store_slice(prev_owner)
            .store_coins(1)
            .store_uint(0, 1)
            .end_cell();
        mint_tokens(prev_owner, jetton_wallet_code, 100000000, master_msg, parts_count, nft_holder_code);
        save_data(total_supply + parts_count, admin_address, content, jetton_wallet_code, frac_data);

        send_raw_message(begin_cell()
            .store_uint(flag::non_bounceable, 6)
            .store_slice(prev_owner)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::excesses, 32)
            .store_uint(query_id, 64)
            .end_cell(), 130); ;; ignore errors
        return ();
    }

    if (op == op::change_pubkey) {
        throw_unless(error::unauthorized, equal_slices(sender_address, admin_address));
        int new_public_key = in_msg_body~load_uint(256);
        cell new_frac_data = begin_cell()
            .store_coins(parts_count)
            .store_ref(nft_holder_code)
            .store_uint(new_public_key, 256)
            .store_slice(collection_address)
            .store_slice(creator_address)
            .end_cell();
        save_data(total_supply, admin_address, content, jetton_wallet_code, new_frac_data);
        return ();
    }

    if (op == op::withdraw_nft) {
        throw_unless(error::unauthorized, equal_slices(sender_address, admin_address));
        slice nft_address = in_msg_body~load_msg_addr();
        slice destionation_address = in_msg_body~load_msg_addr();
        return_nft(nft_address, query_id, destionation_address);
        return ();
    }

    throw(0xffff);
}

(int, int, slice, cell, cell) get_jetton_data() method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code, _) = load_data();
    return (total_supply, -1, admin_address, content, jetton_wallet_code);
}

(int, cell, int, slice, slice) get_frac_data() method_id {
    (_, _, _, _, cell frac_data) = load_data();
    return(unpack_frac_data(frac_data));
}

slice get_wallet_address(slice owner_address) method_id {
    (_, _, _, cell jetton_wallet_code, cell frac_data) = load_data();
    (int parts_count, cell nft_holder_code, _, _, _) = unpack_frac_data(frac_data);
    return calculate_user_jetton_wallet_address(owner_address, my_address(),
        jetton_wallet_code, parts_count, nft_holder_code);
}